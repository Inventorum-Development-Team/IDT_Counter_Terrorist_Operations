items:
  - type: STR_SHOUT
    specialIconSprite: 2
    battleType: 9
    weight: 0
    accuracyUse: 1000
    psiAttackName: STR_SHOUT
    costUse:
      time: 30
    costPanic:
      time: 0
    costMindControl:
      time: 0
    recover: false
    damageType: 1
    power: 100 
    damageAlter: 
     ToStun: 0
     ToHealth: 0
     ToArmor: 0
     ToWound: 0
    fixedWeapon: true
    hitAnimation: -1
    maxRange: 15
    targetMatrix: 6
    LOSRequired: true
    blastRadius: 0
    tags:
      Shout: 1
  - type: STR_HANDCUFFS
    battleType: 6
    size: 0.1
    medikitTargetImmune: true
    invWidth: 1
    invHeight: 1
    bigSprite: 2508
    floorSprite: 2508
    handSprite: 2508
    tuUse: 60
    weight: 2
    costBuy: 300
    costSell: 200
    medikitActionName: STR_USE_CUFFS
    medikitTargetMatrix: 32
    stimulant: 1
    listOrder: 311020
    tags:
      Cuffs: 1

    
  - type: STR_9MM_MAKAROV_X10 #ignoreDuplicate
    tags:
     AmmoNo: 1    
  - type: STR_9MM_MAKAROV_X20 #ignoreDuplicate
    tags:
     AmmoNo: 2    
  - type: STR_9MM_MAKAROV_X30 #ignoreDuplicate
    tags:
     AmmoNo: 3
  - type: STR_9MM_PARABELLUM_X10 #ignoreDuplicate
    tags:
     AmmoNo: 1
  - type: STR_9MM_PARABELLUM_X20 #ignoreDuplicate
    tags:
     AmmoNo: 2
  - type: STR_9MM_PARABELLUM_X30 #ignoreDuplicate
    tags:
     AmmoNo: 3
  - type: STR_9MM_PARABELLUM_X40 #ignoreDuplicate
    tags:
     AmmoNo: 4   
  - type: STR_9MM_GYURZA_X20  #ignoreDuplicate
    tags:
     AmmoNo: 1    
  - type: STR_9MM_GYURZA_X30  #ignoreDuplicate
    tags:
     AmmoNo: 2   
  - type: STR_FN_57_X20 #ignoreDuplicate
    tags:
     AmmoNo: 1    
  - type: STR_FN_57_X50 #ignoreDuplicate
    tags:
     AmmoNo: 1    
  - type: STR_45_ACP_X7 #ignoreDuplicate
    tags:
     AmmoNo: 1    
  - type: STR_45_ACP_X12 #ignoreDuplicate
    tags:
     AmmoNo: 1     
  - type: STR_45_ACP_X25 #ignoreDuplicate
    tags:
     AmmoNo: 1   
  - type: STR_50_AE_X7 #ignoreDuplicate
    tags:
     AmmoNo: 1
  - type: STR_65CBJ_X30 #ignoreDuplicate
    tags:
     AmmoNo: 1
  - type: STR_65CBJ_X100 #ignoreDuplicate
    tags:
     AmmoNo: 2
  - type: STR_HK_4_6_30mmX20 #ignoreDuplicate
    tags:
      AmmoNo: 1
  - type: STR_HK_4_6_30mmX30 #ignoreDuplicate
    tags:
      AmmoNo: 2
  - type: STR_HK_4_6_30mmX40 #ignoreDuplicate
    tags:
      AmmoNo: 3
  - type: STR_CASELESS_4_73_X50 #ignoreDuplicate
    tags:
     AmmoNo: 1    
  - type: STR_5_45_X30 #ignoreDuplicate
    tags:
     AmmoNo: 1    
  - type: STR_5_45_X45 #ignoreDuplicate
    tags:
     AmmoNo: 2    
  - type: STR_5_45_X60 #ignoreDuplicate
    tags:
     AmmoNo: 3    
  - type: STR_5_56_X30 #ignoreDuplicate
    tags:
     AmmoNo: 1    
  - type: STR_5_56_X50 #ignoreDuplicate
    tags:
     AmmoNo: 2    
  - type: STR_5_56_X100 #ignoreDuplicate
    tags:
     AmmoNo: 2
  - type: STR_22_LONG_RIFLE_X6 #ignoreDuplicate
    tags:
     AmmoNo: 1
  - type: STR_SOVIET_7_62_X10 #ignoreDuplicate
    tags:
     AmmoNo: 1
  - type: STR_SOVIET_7_62_X30 #ignoreDuplicate
    tags:
     AmmoNo: 1
  - type: STR_SOVIET_7_62_X40 #ignoreDuplicate
    tags:
     AmmoNo: 2
  - type: STR_SOVIET_7_62_X75 #ignoreDuplicate
    tags:
     AmmoNo: 3    
  - type: STR_NATO_7_62_X5 #ignoreDuplicate
    tags:
     AmmoNo: 1    
  - type: STR_NATO_7_62_X10 #ignoreDuplicate
    tags:
     AmmoNo: 2    
  - type: STR_NATO_7_62_X20 #ignoreDuplicate
    tags:
     AmmoNo: 3    
  - type: STR_NATO_7_62_X50 #ignoreDuplicate
    tags:
     AmmoNo: 1    
  - type: STR_NATO_7_62_X100 #ignoreDuplicate
    tags:
     AmmoNo: 1    
  - type: STR_SOVIET_7_62_MMR_X10 #ignoreDuplicate
    tags:
     AmmoNo: 1       
  - type: STR_SOVIET_7_62_MMR_X50 #ignoreDuplicate
    tags:
     AmmoNo: 1    
  - type: STR_SOVIET_7_62_MMR_X100 #ignoreDuplicate
    tags:
     AmmoNo: 1    
  - type: STR_9_39_X10 #ignoreDuplicate
    tags:
     AmmoNo: 1    
  - type: STR_9_39_X20 #ignoreDuplicate
    tags:
     AmmoNo: 2    
  - type: STR_338_LAPUA_X5 #ignoreDuplicate
    tags:
     AmmoNo: 1    
  - type: STR_50_BMG_X5 #ignoreDuplicate
    tags:
     AmmoNo: 1    
  - type: STR_50_BMG_X10 #ignoreDuplicate
    tags:
     AmmoNo: 1        
  - type: STR_127_X5 #ignoreDuplicate
    tags:
     AmmoNo: 1     
  - type: STR_12G_BUCKSHOT_X2 #ignoreDuplicate
    tags:
     AmmoNo: 1  
  - type: STR_12G_BUCKSHOT_X5 #ignoreDuplicate
    tags:
     AmmoNo: 1    
  - type: STR_12G_BUCKSHOT_X8 #ignoreDuplicate
    tags:
     AmmoNo: 1    
  - type: STR_12G_BUCKSHOT_X20 #ignoreDuplicate
    tags:
     AmmoNo: 2    
  - type: STR_12G_BUCKSHOT_X30 #ignoreDuplicate
    tags:
     AmmoNo: 3    
  - type: STR_12G_SLUG_X8 #ignoreDuplicate
    tags:
     AmmoNo: 1 
  - type: STR_12G_NON_LETHAL_X8 #ignoreDuplicate
    tags:
     AmmoNo: 1   
  - type: STR_ZEVADA_X3 #ignoreDuplicate
    tags:
     PartialFlashBang: 4
  - type: STR_ZEVADA_X1 #ignoreDuplicate
    tags:
     ZevadaSwap: 1
     PartialFlashBang: 10
  - type: STR_RPG_HEAT_X1 #ignoreDuplicate
    tags:
     AmmoNo: 1
  - type: STR_APAV40_X1 #ignoreDuplicate
    tags:
     AmmoNo: 2
  - type: STR_BALISTIC_KNIFE_X1 #ignoreDuplicate
    tags:
     AmmoNo: 1


  - type: STR_P226 #ignoreDuplicate
    tags:
     AmmoReSprite: 1
     UfopaediaAmmoNo: 1
  - type: STR_GLOCK_17  #ignoreDuplicate
    tags:
     AmmoReSprite: 1
     UfopaediaAmmoNo: 1
  - type: STR_GLOCK_18 #ignoreDuplicate
    tags:
     AmmoReSprite: 1
     UfopaediaAmmoNo: 3
  - type: STR_GLOCK_18_STOCK #ignoreDuplicate
    tags:
     AmmoReSprite: 1
     UfopaediaAmmoNo: 3
  - type: STR_M1911 #ignoreDuplicate
    tags:
     AmmoReSprite: 1
     UfopaediaAmmoNo: 1
  - type: STR_MK_23 #ignoreDuplicate
    tags:
     AmmoReSprite: 1
     UfopaediaAmmoNo: 1
  - type: STR_MAKAROV #ignoreDuplicate
    tags:
     AmmoReSprite: 1
     UfopaediaAmmoNo: 1
  - type: STR_FIVE_SEVEN #ignoreDuplicate
    tags:
     AmmoReSprite: 1
     UfopaediaAmmoNo: 1
  - type: STR_VEKTOR #ignoreDuplicate
    tags:
     AmmoReSprite: 1
     UfopaediaAmmoNo: 1
  - type: STR_STETCKIN #ignoreDuplicate
    tags:
     AmmoReSprite: 1
     UfopaediaAmmoNo: 2
  - type: STR_DEAGLE #ignoreDuplicate
    tags:
     AmmoReSprite: 1
     UfopaediaAmmoNo: 1
  - type: STR_GOLDDEAGLE #ignoreDuplicate
    tags:
     AmmoReSprite: 1
     UfopaediaAmmoNo: 1
  - type: STR_M9 #ignoreDuplicate
    tags:
     AmmoReSprite: 1
     UfopaediaAmmoNo: 1
  - type: STR_BROWNING_HP #ignoreDuplicate
    tags:
     AmmoReSprite: 1
     UfopaediaAmmoNo: 1

  - type: STR_TEC_9 #ignoreDuplicate
    tags:
     AmmoReSprite: 1
     UfopaediaAmmoNo: 2
  - type: STR_MP5 #ignoreDuplicate
    tags:
     AmmoReSprite: 1
     UfopaediaAmmoNo: 3
  - type: STR_MPX #ignoreDuplicate
    tags:
     FoldStock: 1
     AmmoReSprite: 1
     UfopaediaAmmoNo: 3
  - type: STR_P90 #ignoreDuplicate
    tags:
     AmmoReSprite: 1
     UfopaediaAmmoNo: 1
  - type: STR_P90_SOPMOD #ignoreDuplicate
    tags:
     AmmoReSprite: 1
     UfopaediaAmmoNo: 1
  - type: STR_SKORPION #ignoreDuplicate
    tags:
     FoldStock: 1
     AmmoReSprite: 1
     UfopaediaAmmoNo: 7
  - type: STR_UZI  #ignoreDuplicate
    tags:
     AmmoReSprite: 1
     FoldStock: 1
     UfopaediaAmmoNo: 7
  - type: STR_UMP #ignoreDuplicate
    tags:
     AmmoReSprite: 1
     UfopaediaAmmoNo: 1
  - type: STR_VITYAZ #ignoreDuplicate
    tags:
     AmmoReSprite: 1
     UfopaediaAmmoNo: 3
  - type: STR_VERSEK #ignoreDuplicate
    tags:
     AmmoReSprite: 1
     UfopaediaAmmoNo: 2
  - type: STR_SKORPIONEVO #ignoreDuplicate
    tags:
     AmmoReSprite: 1
     UfopaediaAmmoNo: 3
  - type: STR_FMG9 #ignoreDuplicate
    tags:
     AmmoReSprite: 1
     FoldStock: 1
     UfopaediaAmmoNo: 2
  - type: STR_CBJMS #ignoreDuplicate
    tags:
     AmmoReSprite: 1
     FoldStock: 1
     UfopaediaAmmoNo: 5
  - type: STR_MP7 #ignoreDuplicate
    tags:
     FoldStock: 1
     AmmoReSprite: 1
     UfopaediaAmmoNo: 6
  - type: STR_M3_GREASEGUN #ignoreDuplicate
    tags:
     FoldStock: 1
     AmmoReSprite: 1
     UfopaediaAmmoNo: 1

  - type: STR_TAVOR #ignoreDuplicate
    tags:
     AmmoReSprite: 1
     UfopaediaAmmoNo: 1
  - type: STR_TAVOR_M203 #ignoreDuplicate
    tags:
     AmmoReSprite: 1
     UfopaediaAmmoNo: 1
  - type: STR_TAVOR_SCOPED #ignoreDuplicate
    tags:
     AmmoReSprite: 1
     UfopaediaAmmoNo: 1
  - type: STR_TAVOR_95X #ignoreDuplicate
    tags:
     AmmoReSprite: 1
     UfopaediaAmmoNo: 1
  - type: STR_TAVOR_95X_SCOPED #ignoreDuplicate
    tags:
     AmmoReSprite: 1
     UfopaediaAmmoNo: 1
  - type: STR_M4 #ignoreDuplicate
    tags:
     AmmoReSprite: 1
     UfopaediaAmmoNo: 1
  - type: STR_M4_SOPMOD #ignoreDuplicate
    tags:
     AmmoReSprite: 1
     UfopaediaAmmoNo: 1
  - type: STR_M4_M320 #ignoreDuplicate
    tags:
     AmmoReSprite: 1
     UfopaediaAmmoNo: 1
  - type: STR_M4_UBS #ignoreDuplicate
    tags:
     AmmoReSprite: 1
     UfopaediaAmmoNo: 3
     UBS: 1
  - type: STR_M4A1 #ignoreDuplicate
    tags:
     AmmoReSprite: 1
     UfopaediaAmmoNo: 1
  - type: STR_M4A1_SOPMOD #ignoreDuplicate
    tags:
     AmmoReSprite: 1
     UfopaediaAmmoNo: 1
  - type: STR_M4A1_M320 #ignoreDuplicate
    tags:
     AmmoReSprite: 1
     UfopaediaAmmoNo: 1
  - type: STR_M4A1_UBS #ignoreDuplicate
    tags:
     AmmoReSprite: 1
     UfopaediaAmmoNo: 3
     UBS: 1
  - type: STR_AK12 #ignoreDuplicate
    tags:
     AmmoReSprite: 1
     UfopaediaAmmoNo: 1
  - type: STR_AK12_SCOPED #ignoreDuplicate
    tags:
     AmmoReSprite: 1
     UfopaediaAmmoNo: 1
  - type: STR_AK15 #ignoreDuplicate
    tags:
     AmmoReSprite: 1
     UfopaediaAmmoNo: 1
  - type: STR_AK15_SCOPED #ignoreDuplicate
    tags:
     AmmoReSprite: 1
     UfopaediaAmmoNo: 1
  - type: STR_FAMAS #ignoreDuplicate
    tags:
     AmmoReSprite: 1
     UfopaediaAmmoNo: 1
  - type: STR_FAMAS_SCOPED #ignoreDuplicate
    tags:
     AmmoReSprite: 1
     UfopaediaAmmoNo: 1
  - type: STR_G36 #ignoreDuplicate
    tags:
     AmmoReSprite: 1
     UfopaediaAmmoNo: 1
  - type: STR_G36_AG #ignoreDuplicate
    tags:
     AmmoReSprite: 1
     UfopaediaAmmoNo: 1
  - type: STR_G36C #ignoreDuplicate
    tags:
     AmmoReSprite: 1
     UfopaediaAmmoNo: 1
  - type: STR_HK416 #ignoreDuplicate
    tags:
     AmmoReSprite: 1
     UfopaediaAmmoNo: 1
  - type: STR_HK416_SOPMOD #ignoreDuplicate
    tags:
     AmmoReSprite: 1
     UfopaediaAmmoNo: 1
  - type: STR_HK416_M320 #ignoreDuplicate
    tags:
     AmmoReSprite: 1
     UfopaediaAmmoNo: 1
  - type: STR_HK416_UBS #ignoreDuplicate
    tags:
     AmmoReSprite: 1
     UfopaediaAmmoNo: 3
     UBS: 1
  - type: STR_HK417 #ignoreDuplicate
    tags:
     AmmoReSprite: 1
     UfopaediaAmmoNo: 1
  - type: STR_HK417_SCOPED #ignoreDuplicate
    tags:
     AmmoReSprite: 1
     UfopaediaAmmoNo: 1
  - type: STR_FX_05 #ignoreDuplicate
    tags:
     AmmoReSprite: 1
     UfopaediaAmmoNo: 1
  - type: STR_FX_05_SCOPED #ignoreDuplicate
    tags:
     AmmoReSprite: 1
     UfopaediaAmmoNo: 1
  - type: STR_SCAR_L #ignoreDuplicate
    tags:
     AmmoReSprite: 1
     UfopaediaAmmoNo: 1
  - type: STR_SCAR_L_SOPMOD #ignoreDuplicate
    tags:
     AmmoReSprite: 1
     UfopaediaAmmoNo: 1
  - type: STR_SCAR_L_GL #ignoreDuplicate
    tags:
     AmmoReSprite: 1
     UfopaediaAmmoNo: 1
  - type: STR_SCAR_H #ignoreDuplicate
    tags:
     AmmoReSprite: 1
     UfopaediaAmmoNo: 3
  - type: STR_SCAR_H_SOPMOD #ignoreDuplicate
    tags:
     AmmoReSprite: 1
     UfopaediaAmmoNo: 3
  - type: STR_SCAR_H_GL #ignoreDuplicate
    tags:
     AmmoReSprite: 1
     UfopaediaAmmoNo: 3
  - type: STR_G11 #ignoreDuplicate
    tags:
     AmmoReSprite: 1
     UfopaediaAmmoNo: 1
  - type: STR_SR_3 #ignoreDuplicate
    tags:
     AmmoReSprite: 1
     UfopaediaAmmoNo: 2
  - type: STR_SR_3_ONE_HANDED #ignoreDuplicate
    tags:
     AmmoReSprite: 1
     UfopaediaAmmoNo: 2
  - type: STR_M16A2 #ignoreDuplicate
    tags:
     AmmoReSprite: 1
     UfopaediaAmmoNo: 1
  - type: STR_M16A2_SCOPED #ignoreDuplicate
    tags:
     AmmoReSprite: 1
     UfopaediaAmmoNo: 1
  - type: STR_M16A2_M203 #ignoreDuplicate
    tags:
     AmmoReSprite: 1
     UfopaediaAmmoNo: 1
  - type: STR_AR_18 #ignoreDuplicate
    tags:
     AmmoReSprite: 1
     UfopaediaAmmoNo: 1
  - type: STR_AR_180 #ignoreDuplicate
    tags:
     AmmoReSprite: 1
     UfopaediaAmmoNo: 1
  - type: STR_AKM #ignoreDuplicate
    tags:
     AmmoReSprite: 1
     UfopaediaAmmoNo: 1
  - type: STR_AK_74 #ignoreDuplicate
    tags:
     AmmoReSprite: 1
     UfopaediaAmmoNo: 1
  - type: STR_AK_74_GP25 #ignoreDuplicate
    tags:
     AmmoReSprite: 1
     UfopaediaAmmoNo: 1
  - type: STR_AKS_74U #ignoreDuplicate
    tags:
     AmmoReSprite: 1
     UfopaediaAmmoNo: 1
  - type: STR_AKS_74U_SOPMOD #ignoreDuplicate
    tags:
     AmmoReSprite: 1
     UfopaediaAmmoNo: 1
  - type: STR_FN_FAL_SCOPED #ignoreDuplicate
    tags:
     AmmoReSprite: 1
     UfopaediaAmmoNo: 3
  - type: STR_G3 #ignoreDuplicate
    tags:
     AmmoReSprite: 1
     UfopaediaAmmoNo: 3
  - type: STR_M14_EBR #ignoreDuplicate
    tags:
     AmmoReSprite: 1
     FoldStock: 1
     UfopaediaAmmoNo: 2
  - type: STR_M14_EBR_SCOPED #ignoreDuplicate
    tags:
     AmmoReSprite: 1
     FoldStock: 1
     UfopaediaAmmoNo: 2
  - type: STR_RK_62 #ignoreDuplicate
    tags:
     AmmoReSprite: 1
     UfopaediaAmmoNo: 1

  - type: STR_PSG_1 #ignoreDuplicate
    tags:
     AmmoReSprite: 1
     UfopaediaAmmoNo: 2
  - type: STR_MSG_90 #ignoreDuplicate
    tags:
     AmmoReSprite: 1
     UfopaediaAmmoNo: 2
  - type: STR_VSS #ignoreDuplicate
    tags:
     AmmoReSprite: 1
     UfopaediaAmmoNo: 1
  - type: STR_DRAGUNOV #ignoreDuplicate
    tags:
     AmmoReSprite: 1
     UfopaediaAmmoNo: 1
  - type: STR_OSV_96 #ignoreDuplicate
    tags:
     AmmoReSprite: 1
     UfopaediaAmmoNo: 1
  - type: STR_SAKO_TRG #ignoreDuplicate
    tags:
     AmmoReSprite: 1
     UfopaediaAmmoNo: 1
  - type: STR_AWP #ignoreDuplicate
    tags:
     AmmoReSprite: 1
     UfopaediaAmmoNo: 2
  - type: STR_AW #ignoreDuplicate
    tags:
     AmmoReSprite: 1
     UfopaediaAmmoNo: 1
  - type: STR_M82 #ignoreDuplicate
    tags:
     AmmoReSprite: 1
     UfopaediaAmmoNo: 1
  
  - type: STR_ORIGIN_12 #ignoreDuplicate
    tags:
     AmmoReSprite: 1
     UfopaediaAmmoNo: 2
  - type: STR_AA_12 #ignoreDuplicate
    tags:
     AmmoReSprite: 1
     UfopaediaAmmoNo: 2
  - type: STR_USAS_12 #ignoreDuplicate
    tags:
     AmmoReSprite: 1
     UfopaediaAmmoNo: 1
  - type: STR_SAIGA_12 #ignoreDuplicate
    tags:
     AmmoReSprite: 1
     UfopaediaAmmoNo: 1
  
  - type: STR_M60 #ignoreDuplicate
    tags:
     AmmoReSprite: 1
     UfopaediaAmmoNo: 1
  - type: STR_M249 #ignoreDuplicate
    tags:
     AmmoReSprite: 1
     UfopaediaAmmoNo: 2
  - type: STR_FN_MINIMI #ignoreDuplicate
    tags:
     AmmoReSprite: 1
     UfopaediaAmmoNo: 2
  - type: STR_MK_48 #ignoreDuplicate
    tags:
     AmmoReSprite: 1
     UfopaediaAmmoNo: 1
  - type: STR_RPK_74 #ignoreDuplicate
    tags:
     AmmoReSprite: 1
     UfopaediaAmmoNo: 2
  - type: STR_PECHENEG #ignoreDuplicate
    tags:
     AmmoReSprite: 1
     UfopaediaAmmoNo: 1
  - type: STR_CBJMS_SAW #ignoreDuplicate
    tags:
     AmmoReSprite: 1
     FoldStock: 1
     UfopaediaAmmoNo: 2
  - type: STR_NEGEV #ignoreDuplicate
    tags:
     AmmoReSprite: 1
     UfopaediaAmmoNo: 2
  
  - type: STR_RPG #ignoreDuplicate
    tags:
     AmmoReSprite: 1
     UfopaediaAmmoNo: 1
  - type: STR_M72_LAW #ignoreDuplicate
    tags:
     AmmoReSprite: 1
     FoldStock: 1

  - type: STR_RIOT_SHIELD #ignoreDuplicate
    tags:
     Shield: 1
       
  - type: STR_FLASHBANG_GRENADE #ignoreDuplicate
    tags:
     FlashBang: 1
     #PartialFlashBang: 50
  
  - type: STR_ELECTRO_FLARE #ignoreDuplicate
    tags:
      STRIKE: 1

  - type: STR_BALISTIC_KNIFE #ignoreDuplicate
    tags:
      AmmoReSprite: 1
      UfopaediaAmmoNo: 1
      BalKnife: 1

extended:
  tags:
    BattleUnit:
      Rank: int
      Shouted: int
      FlashBanged: int #how many turns this unit is flashbanged for, -1 means not flashbanged
      PartialFlashBanged: int #fraction of being flashbanged, ie 50 = 0.5 flashbanged
      OGfiring: int #used to restore fireing accuarcy after flashbang
      OGreactions: int #used to restore reactions after flashbang
      Handcuffed: int

      UNIT_RECOLOR_DESYNC: int
      UNIT_RECOLOR_COLOR: int
      UNIT_RECOLOR_BRIGHTNESS: int
      UNIT_RECOLOR_START_FRAME: int
      UNIT_RECOLOR_FRAME_LENGTH: int

    RuleItem:
      Shout: int
      Cuffs: int
      AmmoReSprite: int
      AmmoNo: int
      FoldStock: int
      UBS: int
      Shield: int
      FlashBang: int #Dose this item have a flashbang effect, and if so, for how many turns.
      PartialFlashBang: int #adds a fraction of a flashbang effect ie 50 = 0.5 flashbang
      STRIKE: int
      BalKnife: int
      ZevadaSwap: int
      UfopaediaAmmoNo: int #The AmmoNo thats shown for the sprite in the Ufopaedia article, make sure to set the sprite IDs to the correct sprite.
    BattleGame:
      Enemies: int
      Allies: int
      Turn: int
  scripts:
     damageUnit: #Balistic knife cant attack with no blade, If anyone has any idea on how to make this a local script please let me know -wethan2
        - offset: 1
          code: |
           var ptr BattleItem weapon;
           var int tagres;
           var int ammorem;
           var ptr BattleItem ammoitem;
           set weapon damaging_item;
           weapon.getTag tagres Tag.BalKnife;
           weapon.getAmmoItem ammoitem;
           ammoitem.getAmmoQuantity ammorem;
           if and eq tagres 1 eq battle_action battle_action_hit;
             if eq ammorem 0;
               set to_health 0;
               set to_armor 0;
               set to_wound 0;
             end;
           end;
           return;

     createUnit:
        - offset: 1 #Halves enemies Tu:s on the first turn
          code: |
           var int tu;
           var int remainder;
           var int faction;
           BattleUnit.getFaction unit faction;
           if eq faction 1;
            unit.getTimeUnits tu;
            set remainder tu;
            mod remainder 2;
            sub tu remainder;
            div tu 2;
            BattleUnit.setTimeUnits unit tu;
            end;
           return;
        - offset: 2 #Labels all units as not currently flashbanged
          code: |
           BattleUnit.setTag unit Tag.FlashBanged -1;
           return;


     newTurnItem: #Resets number of Allies and Enemies alive
        - offset: 1
          code: |
           var int x;
           set x 0;
           BattleGame.setTag battle_game Tag.Enemies x;
           BattleGame.setTag battle_game Tag.Allies x;
           BattleGame.setTag battle_game Tag.Turn turn;
           return;

     newTurnUnit: #Counts number of Allies And Enemies alive
        - offset: 2
          code: |
           var int faction;
           var int allies;
           var int enemies;
           BattleUnit.getFaction unit faction;
           if eq faction 0;
             BattleGame.getTag battle_game allies Tag.Allies;
             add allies 1;
             BattleGame.setTag battle_game Tag.Allies allies;
           end;
           if eq faction 1;
             BattleGame.getTag battle_game enemies Tag.Enemies;
             add enemies 1;
             BattleGame.setTag battle_game Tag.Enemies enemies;
           end;
           return;

        - offset: 3
          code: | #flashbang update
           var int flashbanged; #define variables
           var int accuracy;
           var int reactions;
           var int OGaccuracy;
           var int OGreactions;
           var int partflashbanged;
           #Get tags
           BattleUnit.getTag unit flashbanged Tag.FlashBanged; #unit flashbanged duration
           BattleUnit.getTag unit partflashbanged Tag.PartialFlashBanged; #unit flashbanged duration
           BattleUnit.getTag unit OGaccuracy Tag.OGfiring; #original accuracy
           BattleUnit.getTag unit OGreactions Tag.OGreactions; #original reactions
           
           #if we were using partial flash, clear that and make ourselves no longer flashbanged.
           if eq flashbanged -2;
            set flashbanged -1;
            BattleUnit.setTag unit Tag.FlashBanged flashbanged;
            set partflashbanged 0;
            BattleUnit.setTag unit Tag.PartialFlashBanged 0;
           end;
           
           #If the flashbang has timed out
           if and ge turn flashbanged neq flashbanged -1;
            if gt partflashbanged 0;
             BattleUnit.setTag unit Tag.FlashBanged -2;
            else;
             #BattleUnit.Stats.setFiring unit OGaccuracy; #restore fireing and reaction stats
             BattleUnit.Stats.setReactions unit OGreactions;
             BattleUnit.setTag unit Tag.FlashBanged -1; #set us to not be flashbanged
            end;
           else neq flashbanged -1;
            BattleUnit.setEnergy unit 12; #set our energy to 12
           end;

           return;
        - offset: 4
          code: | #handcuffs stay permanent
           var int cuffed;
           var int health;
           BattleUnit.getTag unit cuffed Tag.Handcuffed;
           if eq cuffed 1;
            BattleUnit.getHealth unit health;
            add health 1;
            BattleUnit.setStun unit health;
            end;
           return;
            
     accuracyMultiplierBonusStats:
         - offset: 10 #Flashbang accuracy reduction
           code: |
            var int flashbanged;
            var int partflashbanged;
            #accuracyMultiplierBonusStats has battlegame functions exposed but no way to get battlegame, 
            #uncomment relevant code if this is changed, fixes a minor bug. 
            #var int turn;

            #BattleGame.getTurn turn;
            unit.getTag flashbanged Tag.FlashBanged;
            unit.getTag partflashbanged Tag.PartialFlashBanged;
            if eq flashbanged -2; #eq flashbanged turn; #use partial flashbang
             sub partflashbanged 100;
             abs partflashbanged; #invert partial flashbang ie 10 -> 90% of total
             mul bonus partflashbanged;
             div bonus 100;
            else gt flashbanged 0;
             set bonus 0; #we are fully flashbanged, and cant aim
            end;
            return bonus;
     hitUnit: 
         - offset: 2 #Shield Script
           code: |
            var ptr BattleItem righthand;
            var ptr BattleItem lefthand;
            var int shield;
            var int random;
            var int kneeling;
            unit.getLeftHandWeapon lefthand;
            unit.getRightHandWeapon righthand;
            BattleItem.getTag lefthand shield Tag.Shield;
            if neq shield 1;
             BattleItem.getTag righthand shield Tag.Shield;
             end;
            if and eq side 0 eq shield 1;
             BattleGame.randomRange battle_game random 0 100;
             BattleUnit.isKneeled unit kneeling;
             if lt random 85;
              set power 0;
              end;
             if and lt random 95 eq kneeling 1;
              set power 0;
              end;
            end;
            
            
            return power part side;
         - offset: 3 #Shouting Script
           code: |
            var int x;
            var int allies;
            var int enemies;
            var int morale;
            var int health;
            var int faction;
            var int turn;
            var int shouted;

            BattleItem.getTag damaging_item x Tag.Shout;

            if eq x 1;
             BattleUnit.getFaction unit faction;

             if eq faction 1;
              BattleGame.getTag battle_game turn Tag.Turn;
              BattleUnit.getTag unit shouted Tag.Shouted;
              if eq shouted turn;
               BattleGame.flashMessage battle_game "STR_ALREADY_SHOUTED";
              end;

              if neq shouted turn;
               BattleUnit.setTag unit Tag.Shouted turn;
               BattleGame.getTag battle_game allies Tag.Allies;
               BattleGame.getTag battle_game enemies Tag.Enemies;
               add allies 1;
               sub allies enemies;
               if lt allies 0;
                set allies 0;
               end;
               mul allies 20;
               BattleUnit.getMorale unit morale;
               sub morale allies;
               BattleUnit.setMorale unit morale;
               end;

              end;
            if eq faction 2;
             BattleUnit.getHealth unit health;
             mul health 2;
             BattleUnit.setStun unit health;
             end;
            end;
            return power part side;

         - offset: 4 #Apply FlashBang Effect
           code: |
             var int flashbang; #set up vars
             var int partflashbang;
             var int flashbanged;
             var int partflashbanged;
             var int turn;
             var int accuracy;
             var int reactions;
             var int turnside;
             var int tagcheck;  #used for Swaping ammo types
             var int ammocount; #used for Swaping ammo types
             
             damaging_item.getTag flashbang Tag.FlashBang;
             damaging_item.getTag partflashbang Tag.PartialFlashBang;

             #Check if our ammo alternates between flash rounds or not
             damaging_item.getTag tagcheck Tag.ZevadaSwap;
             if eq tagcheck 1;
              damaging_item.getAmmoQuantity ammocount;
              if eq ammocount 2;
               set power 1;
               set partflashbang 10;
              else;
               set partflashbang 0;
              end;
             end;

             #see if what hit us applys a flashbang effect
             if or ge flashbang 1 ge partflashbang 1;
              unit.getTag flashbanged Tag.FlashBanged; #get if this unit is flashbanged and for how long
              unit.getTag partflashbanged Tag.PartialFlashBanged;

              battle_game.getTurnSide turnside;
              if eq turnside 1; #enemy side
               add flashbang 1; #add 1 to the flashbang so it dosent get cut short;
              end;

              #If we are already flashed
              if neq flashbanged -1;
               var int partfbmod; #used for rounding partial flashbang
               add flashbanged flashbang;
               #for every 100 PartialFlashBanged, add 1 to flashbang and remove 100 from PartialFlashBanged.
               add partflashbanged partflashbang;
               set partfbmod partflashbanged;
               mod partfbmod 100;
               sub partflashbanged partfbmod; 
               div partflashbanged 100;
               add flashbanged partflashbanged;
               set partflashbanged partfbmod;

               BattleUnit.setTag unit Tag.FlashBanged flashbanged; #stack the new flash on top of our current flash duration
               BattleUnit.setTag unit Tag.PartialFlashBanged partflashbanged;
               BattleUnit.setEnergy unit 0;
              else; #if we are not flashed
               var int partfbmod; #used for rounding partial flashbang
               battle_game.getTurn turn;
               add turn flashbang; #get the current turn + flashbang duration to get when the timer is suposed to end

               add partflashbanged partflashbang;
               set partfbmod partflashbanged;
               mod partfbmod 100;
               sub partflashbanged partfbmod; 
               div partflashbanged 100;
               add turn partflashbanged;
               set partflashbanged partfbmod;

               BattleUnit.setTag unit Tag.PartialFlashBanged partflashbanged;
               BattleUnit.setTag unit Tag.FlashBanged turn; #set that as our flashbanged status
               BattleUnit.Stats.getReactions unit reactions;
               BattleUnit.setTag unit Tag.OGreactions reactions;
               BattleUnit.Stats.setReactions unit 0;
               BattleUnit.setEnergy unit 12;
              end;
             end;
             return power part side;

     healUnit: #Handcuff script
       - offset: 1
         code: |
          var int x;
          var int morale;
          var int health;


          BattleItem.getTag item x Tag.Cuffs;
          if eq x 1;



           BattleUnit.getMorale target morale;
           if lt morale 30;
             BattleUnit.getHealth target health;
             add health 1;
             BattleUnit.setStun target health;
             BattleUnit.setTag target Tag.Handcuffed 1;
           end;
          end;
          return;

    #  reactionWeaponAction: #Jamming Script (doesn't work)
    #     - offset: 1
    #       code: |
    #        var int chance;
    #        var int random;
    #        var int total;
    #        BattleItem.getTag weapon chance Tag.JammChance;
    #        if gt chance 0;
    #         set total 1000;
    #         sub total chance;
    #         BattleGame.randomRange battle_game random 0 1000;
    #         debug_log random;
    #         if gt random total;
    #          BattleItem.setAmmoQuantity weapon 0;
    #          BattleGame.flashMessage battle_game "STR_JAMMED";
    #          end;
    #         end;
    #         return reaction_chance;

            
           
           
            
     selectItemSprite: #Switches between weapon sprites depending on ammo
       - offset: 1
         code: |
          var int x;
          var int y;
          var int z;
          var int a;
          var ptr BattleItem ammoptr;
          var ptr BattleItem UBSammoptr;
          var ptr RuleInventory invptr;
          var int left;
          var int right;
          var int ammono;
          var int UfopaediaAmmono;
          var int UBSammono;

          BattleItem.getTag item x Tag.AmmoReSprite;

          if eq x 1;

            item.getAmmoItem ammoptr;
            BattleItem.getTag  ammoptr ammono Tag.AmmoNo;
            BattleItem.getTag item y Tag.FoldStock;
            BattleItem.getTag item UfopaediaAmmono Tag.UfopaediaAmmoNo;

            if eq y 1;
              item.getSlot invptr;
              RuleInventory.isLeftHand invptr left;
              RuleInventory.isRightHand invptr right;
              if and eq left 0 eq right 0;
                set z 1;
              end;
            end;

            mul UfopaediaAmmono 8;
            sub sprite_index UfopaediaAmmono;

            if eq z 1;
              add sprite_index 32;

              if eq ammono 1;
                add sprite_index 8;
              end;
              if eq ammono 2;
                add sprite_index 16;
              end;
              if eq ammono 3;
                add sprite_index 24;
              end;
              if eq ammono 4;
                add sprite_index 32;
              end;
            end;

            if neq z 1;
              if eq ammono 1;
                add sprite_index 8;
              end;
              if eq ammono 2;
                add sprite_index 16;
              end;
              if eq ammono 3;
                add sprite_index 24;
              end;
              if eq ammono 4;
                add sprite_index 32;
              end;
            end;

            BattleItem.getTag item a Tag.UBS;

            if eq a 1;
              item.getAmmoForSlot UBSammoptr 1;
              BattleItem.getTag  UBSammoptr UBSammono Tag.AmmoNo;
              if eq UBSammono 1;
                add sprite_index 16;
              end;
            end;
          end;


          if and eq x 2 eq blit_part blit_item_big;

            item.getAmmoItem ammoptr;
            BattleItem.getTag  ammoptr ammono Tag.AmmoNo;
            BattleItem.getTag item y Tag.FoldStock;

            if eq y 1;
              item.getSlot invptr;
              RuleInventory.isLeftHand invptr left;
              RuleInventory.isRightHand invptr right;
              if and eq left 0 eq right 0;
                set z 1;
              end;
            end;

            if eq z 1;
              add sprite_index 4;
              add sprite_index ammono;
            end;

            if neq z 1;
              add sprite_index ammono;
            end;

            BattleItem.getTag item a Tag.UBS;
            if eq a 1;
              item.getAmmoForSlot UBSammoptr 1;
              BattleItem.getTag  UBSammoptr UBSammono Tag.AmmoNo;
              if eq UBSammono 1;
                add sprite_index 2;
              end;
            end;
          end;


          if eq x 3;

            item.getAmmoItem ammoptr;
            BattleItem.getTag  ammoptr ammono Tag.AmmoNo;
            BattleItem.getTag item y Tag.FoldStock;

            if eq y 1;
              item.getSlot invptr;
              RuleInventory.isLeftHand invptr left;
              RuleInventory.isRightHand invptr right;
              if and eq left 0 eq right 0;
                set z 1;
              end;
            end;

            if eq z 1;
              add sprite_index 32;
              if eq ammono 0;
                sub sprite_index 8;
              end;
              if eq ammono 1;
                add sprite_index 0;
              end;
              if eq ammono 2;
                add sprite_index 8;
              end;
              if eq ammono 3;
                add sprite_index 16;
              end;
              if eq ammono 4;
                add sprite_index 24;
              end;
            end;

            if neq z 1;
              if eq ammono 0;
                sub sprite_index 8;
              end;
              if eq ammono 1;
                add sprite_index 0;
              end;
              if eq ammono 2;
                add sprite_index 8;
              end;
              if eq ammono 3;
                add sprite_index 16;
              end;
              if eq ammono 4;
                add sprite_index 24;
              end;
            end;

            BattleItem.getTag item a Tag.UBS;
            if eq a 1;
              item.getAmmoForSlot UBSammoptr 1;
              BattleItem.getTag  UBSammoptr UBSammono Tag.AmmoNo;
              if eq UBSammono 1;
                add sprite_index 16;
              end;
            end;
          end;

          return sprite_index; 

       - offset: 1 # Air Strike Smoke sprite Script
         code: |
          var int x;
          var int y;
          BattleItem.getTag item x Tag.STRIKE;
          BattleItem.isFuseEnabled item y;
          if and eq x 1 eq y 1;
            add sprite_index 8;
          end;
          return sprite_index;

     recolorUnitSprite:
      # Based on script of the 40k mod
      # Credits go to BulletDesigner and Ohartenstein
      #*** Handles periodic recolors due to buffs/debuffs on units ***
       - offset: 10
         code: |
          var int frame;
          var int frameLength;
          var int recolorPeriod;
          var int desync;
          var int color;
          var int newShade;
          var int temp;
          var int morale;
          var int flashbanged;

          # Check to make sure this unit isn't set to be recolored by a hit first
          unit.getTag frame Tag.UNIT_RECOLOR_START_FRAME;
          unit.getTag frameLength Tag.UNIT_RECOLOR_FRAME_LENGTH;
          BattleUnit.getTag unit flashbanged Tag.FlashBanged;


          if neq frame 0;

            set temp anim_frame;
            sub temp frame;

            if lt temp frameLength;

              return new_pixel;

            end;

          end;

          set recolorPeriod 32;
          set frameLength 4;

          unit.getTag desync Tag.UNIT_RECOLOR_DESYNC;
          set frame anim_frame;
          add frame desync;
          mod frame recolorPeriod;

          sub frame frameLength;
          sub frame 1;

          BattleUnit.getMorale unit morale;

          #Morale loss
          if and lt morale 30 lt frame frameLength;

            set color COLOR_X1_GRAY;

            set temp frameLength;
            sub temp frame;
            mul temp 2; # a parameter that creates a nice flash animation
            get_shade newShade new_pixel;
            sub newShade temp;

            if and gt newShade 3 lt newShade 16;

              set_shade new_pixel newShade;
              set_color new_pixel color;

            end;

          end;

          set frameLength 4;

          set frame anim_frame;
          add frame 8;
          mod frame recolorPeriod;

          sub frame frameLength;
          sub frame 1;

          #Flashbanged
          if lt frame frameLength;
           var int turn;
           battle_game.getTurn turn;
           if and gt flashbanged -1 neq flashbanged turn;

             set color COLOR_X1_PURPLE0;

             set temp frameLength;
             sub temp frame;
             mul temp 2; # a parameter that creates a nice flash animation
             get_shade newShade new_pixel;
             sub newShade temp;

             if and gt newShade 3 lt newShade 16;

               set_shade new_pixel newShade;
               set_color new_pixel color;

             end;

           end;
          end;

          #PartalyFlashbanged
          if lt frame frameLength;
           var int turn;
           battle_game.getTurn turn;
           if or eq flashbanged -2 eq flashbanged turn;
             set color COLOR_X1_BLUE1;

             set temp frameLength;
             sub temp frame;
             mul temp 2; # a parameter that creates a nice flash animation
             get_shade newShade new_pixel;
             sub newShade temp;

             if and gt newShade 3 lt newShade 16;

               set_shade new_pixel newShade;
               set_color new_pixel color;

             end;

           end;
          end;

          return new_pixel;



extraStrings:
  - type: en-US
    strings:
      STR_ALREADY_SHOUTED: "Unit already shouted at"
      STR_JAMMED: "Weapon Jammed"
      STR_HANDCUFFS: "Handcuffs"
      STR_SHOUT: "Shout"
      STR_USE_CUFFS: "Use Handcuffs"
